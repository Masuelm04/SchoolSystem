<BSToaster />
@page "/estadosasistencia"
@using SchoolSystem.Core.DTOs.EstadoAsistencia
@using SchoolSystem.UI.FrontEnd.Services
@using BlazorStrap
@inject IBlazorStrap blazorStrap
@inject EstadoAsistenciaService estadoAsistenciaService
@inject NavigationManager navigation

<h2 class="text-center">ESTADOS DE ASISTENCIA</h2>

@if (estados == null)
{
    <p class="text-center text-primary">LOADING...</p>
}
else
{
    <BSButton Color="BlazorStrap.BSColor.Success" @onclick="CrearEstadoAsistencia">Registrar Nuevo Estado de Asistencia</BSButton>

    <BSTable class="table-responsive-lg" Color="OTableColor" IsResponsive="OIsResponsive" IsBordered="OIsBordered" IsBorderLess="OIsBorderLess" IsCaptionTop="OIsCaptionTop" IsStriped="OIsStriped">
        <caption class="text-black">Lista de Estados de Asistencia</caption>
        <BSTHead>
            <BSTR>
                <BSTD>Id</BSTD>
                <BSTD>Estado</BSTD>
                <BSTD>Descripción</BSTD>
                <BSTD>Acciones</BSTD>
            </BSTR>
        </BSTHead>
        <BSTBody>
            @foreach (var estado in estados)
            {
                <BSTR>
                    <BSTD AlignRow="OAlignRow" Color="OTDColor" IsActive="OIsActive">@estado.Id</BSTD>
                    <BSTD>@estado.Nombre</BSTD>
                    <BSTD>@estado.Descripcion</BSTD>
                    <BSTD>
                        <NavLink class="btn btn-primary" href="@GetEditUrl(estado.Id)">
                            <i class="fas fa-edit"></i> Editar
                        </NavLink>
                        <BSButton Color="BlazorStrap.BSColor.Danger" @onclick="() => DeleteEstado(estado.Id)">Eliminar</BSButton>
                    </BSTD>
                </BSTR>
            }
        </BSTBody>
    </BSTable>
}

@code{
    private List<EstadoAsistenciaDTO> estados;
    private EstadoAsistenciaDTO estadoAsistencia = new EstadoAsistenciaDTO();

    private BSColor OTableColor { get; set; } = BSColor.Default;
    private bool OIsResponsive { get; set; } = true;
    private bool OIsBordered { get; set; }
    private bool OIsBorderLess { get; set; }
    private bool OIsCaptionTop { get; set; } = true;
    private bool OIsStriped { get; set; } = true;
    private AlignRow OTRAlignRow { get; set; }
    private BSColor OTRColor { get; set; } = BSColor.Default;
    private bool OTRIsActive { get; set; }
    private AlignRow OAlignRow { get; set; }
    private BSColor OTDColor { get; set; } = BSColor.Default;
    private bool OIsActive { get; set; }


    protected override async Task OnInitializedAsync()
    {
        estados = await estadoAsistenciaService.ListarEstadosAsistenciaAsync();
    }

    private async Task RegistrarEstado()
    {
        try
        {
            await estadoAsistenciaService.RegistrarEstadoAsistenciaAsync(estadoAsistencia);
            blazorStrap.Toaster.Add("¡Estado registrado exitosamente!", options => options.CloseAfter = 5000);
            estados = await estadoAsistenciaService.ListarEstadosAsistenciaAsync();
        }
        catch (Exception ex)
        {
            blazorStrap.Toaster.Add($"Error al registrar el estado: {ex.Message}", options => options.CloseAfter = 5000);
        }
    }

    private async Task DeleteEstado(int id)
    {
        try
        {
            await estadoAsistenciaService.EliminarEstadoAsistenciaAsync(id);
            estados.RemoveAll(c => c.Id == id);

            blazorStrap.Toaster.Add("Estado de asistencia eliminado correctamente", o =>
            {
                o.Color = BSColor.Danger;
                o.HasIcon = true;
                o.CloseAfter = 500;
            });

            estados = await estadoAsistenciaService.ListarEstadosAsistenciaAsync();
        }
        catch (Exception ex)
        {
            blazorStrap.Toaster.Add($"Error al eliminar el estado: {ex.Message}", options => options.CloseAfter = 5000);
        }
    }

    private string GetEditUrl(int id)
    {
        return $"/estadosasistencia/edit/{id}";
    }

    private void CrearEstadoAsistencia()
    {
        navigation.NavigateTo("/estadosasistencia/agregarestadoasistencia");
    }
}