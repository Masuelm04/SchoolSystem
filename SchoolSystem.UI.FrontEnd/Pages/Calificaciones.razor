<BSToaster />
@page "/calificaciones"
@using SchoolSystem.Core.DTOs.Calificacion
@using SchoolSystem.Core.DTOs.Estudiante
@using SchoolSystem.Core.DTOs.Materia
@using SchoolSystem.UI.FrontEnd.Services
@using BlazorStrap
@inject IBlazorStrap blazorStrap
@inject CalificacionService calificacionService
@inject EstudianteService estudianteService
@inject MateriaService materiaService

<h2 class="text-center">CALIFICACIONES</h2>

@if (calificaciones == null)
{
    <p class="text-center text-primary">LOADING...</p>
}
else
{
    <BSButton Color="BlazorStrap.BSColor.Success" Target="modalRegistrarCalificacion">Registrar Nueva Calificación</BSButton>

    <BSTable class="table-responsive-lg" Color="OTableColor" IsResponsive="OIsResponsive" IsBordered="OIsBordered" IsBorderLess="OIsBorderLess" IsCaptionTop="OIsCaptionTop" IsStriped="OIsStriped">
        <caption class="text-black">Lista de Calificaciones</caption>
        <BSTHead>
            <BSTR>
                <BSTD>Id</BSTD>
                <BSTD>Estudiante</BSTD>
                <BSTD>Materia</BSTD>
                <BSTD>Calificación</BSTD>
                <BSTD>Literal</BSTD>
                <BSTD>Acciones</BSTD>
            </BSTR>
        </BSTHead>
        <BSTBody>
            @foreach (var calificacion in calificaciones)
            {
                <BSTR>
                    <BSTD AlignRow="OAlignRow" Color="OTDColor" IsActive="OIsActive">@calificacion.Id</BSTD>
                    <BSTD>@calificacion.NombreEstudiante</BSTD>
                    <BSTD>@calificacion.NombreMateria</BSTD>
                    <BSTD>@calificacion.Nota</BSTD>
                    <BSTD>@calificacion.Literal</BSTD>
                    <BSTD>
                        <BSButton Color="BlazorStrap.BSColor.Primary" Target="modalEditarCalificacion">Editar</BSButton>
                        <BSButton Color="BlazorStrap.BSColor.Danger" @onclick="() => DeleteCalificacion(calificacion.Id)">Eliminar</BSButton>
                    </BSTD>
                </BSTR>
            }
        </BSTBody>
    </BSTable>

    @* Modal para registrar calificacion *@

    <BSModal DataId="modalRegistrarCalificacion" OnShow="@CargarDatosParaListar" HideOnValidSubmit="true" IsStaticBackdrop="true">
        <BSForm Model="model" OnValidSubmit="@RegistrarCalificacion">
            <DataAnnotationsValidator/>
            <BSModalHeader>Registrar Calificación</BSModalHeader>
            <BSModalContent>
                <BSValidationSummary/>
            
                <div class="mb-3">
                    <BSLabel>Estudiante</BSLabel>
                    <BSInput InputType="InputType.Select" TValue="int" @bind-value="model.IdEstudiante">
                        <option value="">Seleccione un estudiante</option>
                        @foreach (var estudiante in Estudiantes)
                        {
                            <option value="@estudiante.Id">@estudiante.Nombre</option>
                        }
                    </BSInput>
                    <BSFeedback For="@(() => model.IdEstudiante)" />
                </div>
            
                <div class="mb-3">
                    <BSLabel>Materia</BSLabel>
                    <BSInput InputType="InputType.Select" TValue="int" @bind-value="model.IdMateria">
                        <option value="">Seleccione una materia</option>
                        @foreach (var materia in Materias)
                        {
                            <option value="@materia.Id">@materia.Nombre</option>
                        }
                    </BSInput>
                    <BSFeedback For="@(() => model.IdMateria)" />
                </div>
            
                <div class="mb-3">
                    <BSLabel>Calificación</BSLabel>
                    <BSInput InputType="InputType.Number" @bind-Value="model.Nota" />
                    <BSFeedback For="@(() => model.Nota)" />
                </div>
            </BSModalContent>
            <BSModalFooter>
                <BSButton Target="modalRegistrarCalificacion">Cancelar</BSButton>
                <BSButton IsSubmit="true" Color="BSColor.Primary">Registrar</BSButton>
            </BSModalFooter>
        </BSForm>
    </BSModal>   

    
    @* Modal para editar calificacion *@

   @*  <BSModal DataId="modalEditarCalificacion" OnShow="@CargarDatosEdicion" HideOnValidSubmit="true" IsStaticBackdrop="true">
        <BSForm Model="calificacionEditar" OnValidSubmit="@ActualizarCalificacion">
            <DataAnnotationsValidator />
            <BSModalHeader>Editar Calificación</BSModalHeader>
            <BSModalContent>
                <BSValidationSummary />

                <div class="mb-3">
                    <BSLabel>Estudiante</BSLabel>
                    <BSInput InputType="InputType.Select" TValue="int" @bind-Value="calificacionEditar.IdEstudiante">
                        @foreach (var estudiante in Estudiantes)
                        {
                            <option value="@estudiante.Id">@estudiante.Nombre</option>
                        }
                    </BSInput>
                </div>

                <div class="mb-3">
                    <BSLabel>Materia</BSLabel>
                    <BSInput InputType="InputType.Select" TValue="int" @bind-Value="calificacionEditar.IdMateria">
                        @foreach (var materia in Materias)
                        {
                            <option value="@materia.Id">@materia.Nombre</option>
                        }
                    </BSInput>
                </div>

                <div class="mb-3">
                    <BSLabel>Calificación</BSLabel>
                    <BSInput InputType="InputType.Number" @bind-Value="calificacionEditar.Nota" />
                    <BSFeedback For="@(() => calificacionEditar.Nota)" />
                </div>
            </BSModalContent>
            <BSModalFooter>
                <BSButton Target="modalEditarCalificacion">Cancelar</BSButton>
                <BSButton IsSubmit="true" Color="BSColor.Primary">Actualizar</BSButton>
            </BSModalFooter>
        </BSForm>
    </BSModal> *@

}

@code {
    private List<CalificacionDTO> calificaciones;
    private CalificacionDTO calificacion;
    private ModCalificacionDTO model = new ModCalificacionDTO();
    private List<EstudianteDTO> Estudiantes = new List<EstudianteDTO>();
    private List<MateriaDTO> Materias = new List<MateriaDTO>();

    private BSColor OTableColor { get; set; } = BSColor.Default;
    private bool OIsResponsive { get; set; } = true;
    private bool OIsBordered { get; set; }
    private bool OIsBorderLess { get; set; }
    private bool OIsCaptionTop { get; set; } = true;
    private bool OIsStriped { get; set; } = true;
    private AlignRow OTRAlignRow { get; set; }
    private BSColor OTRColor { get; set; } = BSColor.Default;
    private bool OTRIsActive { get; set; }
    private AlignRow OAlignRow { get; set; }
    private BSColor OTDColor { get; set; } = BSColor.Default;
    private bool OIsActive { get; set; }

    protected override async Task OnInitializedAsync()
    {
        calificaciones = await calificacionService.ListarCalificacionesAsync();
    }

    private async Task CargarDatosParaListar()
    {
        try
        {
            Estudiantes = await estudianteService.ListarEstudiantesAsync();
            Materias = await materiaService.ListarMateriasAsync();
        }
        catch (Exception ex)
        {
            blazorStrap.Toaster.Add($"Error al cargar datos: {ex.Message}", options => options.CloseAfter = 5000);
        }
    }

    private async Task RegistrarCalificacion()
    {
        try
        {
            await calificacionService.RegistrarCalificacionAsync(model);
            blazorStrap.Toaster.Add("¡Calificación registrada exitosamente!", options => options.CloseAfter = 5000);
            calificaciones = await calificacionService.ListarCalificacionesAsync();
        }
        catch (Exception ex)
        {
            blazorStrap.Toaster.Add($"Error al registrar la calificación: {ex.Message}", options => options.CloseAfter = 5000);
        }
    }

    private async Task DeleteCalificacion(int id)
    {
        var success = await calificacionService.EliminarCalificacionAsync(id);
        if (success)
        {
            calificaciones.RemoveAll(c => c.Id == id);
        }
    }

    // private async Task CargarDatosParaEditar()
    // {
    //     try
    //     {
    //         calificacion = await calificacionService.ObtenerCalificacionPorIdAsync(calificacion.Id);
    //     }
    //     catch (Exception ex)
    //     {
    //         blazorStrap.Toaster.Add($"Error al cargar datos: {ex.Message}", options => options.CloseAfter = 5000);
    //     }
    // }

    

    // private async Task EditCalificacion(int id)
    // {
    //     // Lógica para editar calificación, por ejemplo, redirigir a otro formulario de edición
    //     var calificacion = await calificacionService.ObtenerCalificacionPorIdAsync(id);
    //     // Redirigir o abrir un formulario para editar (esto depende de tu diseño)
    // }

    

    

    private CalificacionDTO calificacionEditar = new CalificacionDTO();
    // private ModCalificacionDTO calificacionEditar = new ModCalificacionDTO();
    // private List<EstudianteDTO> Estudiantes = new List<EstudianteDTO>();
    // private List<MateriaDTO> Materias = new List<MateriaDTO>();
    [Parameter] public int? IdCalificacion { get; set; } // ID de la calificación a editar

    // Método para cargar los datos de la calificación al abrir el modal
    private async Task CargarDatosEdicion(string id)
    {
        try
        {
            // Cargar listas de estudiantes y materias (ya deben estar disponibles para edición)
            Estudiantes = await estudianteService.ListarEstudiantesAsync();
            Materias = await materiaService.ListarMateriasAsync();

            // Cargar los datos de la calificación seleccionada para edición
            calificacionEditar = calificaciones.Where(c => c.Id.ToString() == id).Select(cf => new CalificacionDTO()
            {
                Id = cf.Id,
                IdEstudiante = cf.IdEstudiante,
                IdMateria = cf.IdMateria,
                Nota = cf.Nota
            }).FirstOrDefault();
                // var calificacion = await calificacionService.ObtenerCalificacionPorIdAsync(IdCalificacion.Value);
                // if (calificacion != null)
                // {
                //     calificacionEditar = new ModCalificacionDTO
                //         {
                            
                //             IdEstudiante = calificacion.IdEstudiante,
                //             IdMateria = calificacion.IdMateria,
                //             Nota = calificacion.Nota
                //         };
                // }
                // else
                // {
                //     blazorStrap.Toaster.Add("No se encontró la calificación seleccionada.", options => options.CloseAfter = 5000);
                // }
            
        }
        catch (Exception ex)
        {
            blazorStrap.Toaster.Add($"Error al cargar los datos: {ex.Message}", options => options.CloseAfter = 5000);
        }
    }

    // Método para actualizar la calificación
    // private async Task ActualizarCalificacion()
    // {
    //     try
    //     {
    //         if (IdCalificacion.HasValue)
    //         {
    //             await calificacionService.EditarCalificacionAsync(IdCalificacion.Value, calificacionEditar);
    //             blazorStrap.Toaster.Add("¡Calificación actualizada exitosamente!", options => options.CloseAfter = 5000);
    //             calificaciones = await calificacionService.ListarCalificacionesAsync();
    //         }
    //         else
    //         {
    //             blazorStrap.Toaster.Add("No se proporcionó un ID válido para la calificación.", options => options.CloseAfter = 5000);
    //         }
    //     }
    //     catch (Exception ex)
    //     {
    //         blazorStrap.Toaster.Add($"Error al actualizar la calificación: {ex.Message}", options => options.CloseAfter = 5000);
    //     }
    // }
}
